AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::LanguageExtensions'
Description: dept Server Pattern - Windows Server 2019

Parameters:
  pProjectName:
    Type: String
  pDefaultInstanceType:
    Type: String
    Description: Provide an EC2 Instance type for dept instances
  pDefaultSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for dept servers
  pDefaultAMI:
    # Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Type: String
  pVpcId:
    Type: String
  pHostedZoneId:
    Type: String
  pDesiredSize:
    Type: Number
    Default: "1"
  amaxSize:
    Type: Number
    Default: "2"
  aminSize:
    Type: Number
    Default: "1"
  pEnvironment:
    Type: String
  pServerNames: 
    Type: CommaDelimitedList
    Default: "acdrNetEast,acdrNetSoth,acdrNetWest,acdrNetNrth,acdrNetCtrl,acdrClsE1,acdrClsE2,acdrClsE3,acdrClsS1,acdrClsS2,acdrClsS3,acdrClsW1,acdrClsW2,acdrClsW3,acdrClsN1,acdrClsN2,acdrClsC1,acdrClsC2,acdrSteNe,acdrSteGl,acdrSteMa,acdrSteSe,acdrSteFl,acdrStePa,acdrSteSw,acdrSteNw,acdrSteGp,acdrSteMw,acdrSteMt,acdrSteSc,acdrSteTx"
### Tag Parameters ################
  pTagdeptCustomerData:
    Type: String
  pTagdeptDataclass:
    Type: String
  pTagdeptLaunchedBy:
    Type: String
  pTagdeptLifecycle:
    Type: String
  pTagdeptPurpose:
    Type: String
  pTagdeptResourceCustodian:
    Type: String
  pTagdeptTeamOwner:
    Type: String
  pTagdeptVastId:
    Type: String
  pTagdeptVsad:
    Type: String
  pTagdeptRole:
    Type: String
  pTagdeptServerType:
    Type: String

Mappings:
  
  amiExcemptTags:
    dev: 
      45days: "fed--non-prod-ec2-ami-no-launch-after-45days"
      90days: "fed--non-prod-ec2-ami-age-90days"
      120days: "fed--non-prod-ec2-ami-age-120days"
      135days: "fed--non-prod-ec2-ami-age-135days"

  mServers:
    acdrNetEast:
      Name: acdr-net-east
      InstanceSize: c6i.4xlarge
      DiskSize: 200
      TagValue: network
      PreProdRegion1Subnet: 
        - "subnet-444"
      PreProdRegion2Subnet: 
        - "subnet-44"
      ProdRegion1Subnet: 
        - "subnet-444"
      ProdRegion2Subnet: 
        - "subnet-444"

Conditions:
  cIsDev:
    !Equals [!Ref pEnvironment, 'dev']
  cIsTest:
    !Equals [!Ref pEnvironment, 'test']
  cIsDevOrTest: !Or
    - Condition: cIsDev
    - Condition: cIsTest
  cIsPreProd:
    !Equals [!Ref pEnvironment, "preprod"]
  cIsProd:
    !Equals [!Ref pEnvironment, "prod"]
  cIsPreProdOrProd: !Or
    - Condition: cIsPreProd
    - Condition: cIsProd
  cIsUsEast1:
    !Equals [!Ref AWS::Region, 'us-east-1']
  cIsUsWest2:
    !Equals [!Ref AWS::Region, 'us-west-2']

Resources:
  'Fn::ForEach::deptServers':
    - ServerName
    - !Ref pServerNames
    - '${ServerName}LaunchTemplate':
        Type: AWS::EC2::LaunchTemplate
        #Condition: cIsPreProdOrProd
        Metadata:
          AWS::CloudFormation::Init:
            configSets:
              ascending:
                - config1
                - config2
                - config3
            config1:
              files:
                C:\Users\Administrator\Desktop\userdata.ps1:
                  content: !Sub
                    - |
                      param ($server_name='${HOSTNAME}', $port='2103')
                      
                      $background_image = ""
                      $fw_rule_name = "firewall rule enable"
                      $db_script = "./dbscript.bat"
                      $prometheus_exporter_fw_port = "4124"
                      $vrt_spider_port = "4741"
                      $s3_bucket_tool = "s3://dept-dept-tools-${pTagdeptLifecycle}"
                      $s3_bucket_bgimage = "s3://dept-background-images-${pTagdeptLifecycle}"
                      $aws_cli = "C:\Program Files\Amazon\AWSCLIV2\aws.exe"
                      $base_dir = "C:\Scripts"
                      $devops_tool_dir = "C:\DevOps\Tools\"
                      $production_account_id = "1111"
                      $preprod_account_id = "1111"
                      $test_account_id = "11111"
                      $domain = ".eye.com"
                      $domain_part = "eye.com"
                      $alias = "${HOSTNAME}-${ENVIRONMENT_NAME}-${REGION}"
                      $hostname = "${HOSTNAME}"
                      $hosted_zone_id = "${HOSTED_ZONE_ID}"
                      $host_qdn = $hostname + $domain
                      $alias_qdn = $alias + $domain

                      [string]$token = Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token-ttl-seconds" = "21600"} -Method PUT -Uri http://169.254.169.254/latest/api/token
                      $region = (Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token" = $token} -Method GET http://169.254.169.254/latest/dynamic/instance-identity/document).region
                      $account_id = (Invoke-WebRequest -Headers @{"X-aws-ec2-metadata-token" = $token} -Method GET -UseBasicParsing -Uri http://169.254.169.254/latest/dynamic/instance-identity/document | ConvertFrom-Json).accountId
                      $private_ip = (Invoke-WebRequest -Headers @{"X-aws-ec2-metadata-token" = $token} -Method GET -UseBasicParsing -Uri http://169.254.169.254/latest/meta-data/local-ipv4)
                      $ec2_fqdn = $region + ".ec2-utilities.amazonaws.com"

                      $recordinfo = @"
                      {
                        "Comment": "Create an A record",
                        "Changes": [
                          {
                            "Action": "UPSERT",
                            "ResourceRecordSet": {
                              "Name": "test1.eye.com",
                              "Type": "A",
                              "TTL": 300,
                              "ResourceRecords": [
                                {
                                  "Value": "change"
                                }
                              ]
                            }
                          }
                        ]
                      }
                      "@

                      $recorddnsinfo = @"
                      {
                        "Comment": "Create an Alias record",
                        "Changes": [
                          {
                            "Action": "UPSERT",
                            "ResourceRecordSet": {
                              "Name": "test1.preprod.us-east-1.eye.com",
                              "Type": "A",
                              "AliasTarget": {
                                "HostedZoneId": "xxxxFL5HAxxxx",
                                "DNSName": "acdr-net-dev.eye.com	",
                                "EvaluateTargetHealth": false
                              }
                            }
                          }
                        ]
                      }
                      "@

                      #download background image
                      
                      & "$aws_cli" s3 sync $s3_bucket_bgimage .

                      if (Test-Path $devops_tool_dir) {  
                        Write-Host "$devops_tool_dir Exists"
                        # Perform Delete file from folder operation
                      }
                      else
                      {
                        #PowerShell Create directory if not exists
                        New-Item $devops_tool_dir -ItemType Directory
                        Write-Host "Folder Created successfully"
                        Set-Location C:/DevOps/Tools/
                        
                        #s3 download tool
                        Write-Output "download tool form s3"
                        & "$aws_cli" s3 sync $s3_bucket_tool .
                      }

                      # Open port on fw
                      if((netsh advfirewall firewall show rule name="$fw_rule_name") -Contains "No rules match the specified criteria.")
                      {
                        Write-Output "open $port on firewall"  
                        netsh advfirewall firewall add rule name="$fw_rule_name" dir=in action=allow protocol=TCP localport=$port enable=yes
                      }
                      else
                      {
                        Write-Output "the rule already exists"
                      }

                      # Open port on for VRT to Spider
                      if((netsh advfirewall firewall show rule name="$fw_rule_name_vrt") -Contains "No rules match the specified criteria.")
                      {
                        Write-Output "open $port on firewall"  
                        netsh advfirewall firewall add rule name="$fw_rule_name_vrt" dir=in action=allow protocol=TCP localport=$vrt_spider_port enable=yes
                      }
                      else
                      {
                        Write-Output "VRT to Spider rule already exists"
                      }

                      # Rename server
                      Write-Output "Rename server to $server_name"
                      Rename-Computer -NewName "$server_name"

                      # Change background
                      # Write-Output "Change background"
                      # set-itemproperty -path "HKCU:Control Panel\Desktop" -name WallPaper -value $background_image
                      New-Item $base_dir -ItemType Directory
                      Write-Host "scripts Folder Created successfully"
                      
                      Set-Location $base_dir
                      
                      #download background image
                      & "$aws_cli" s3 sync $s3_bucket_bgimage .
                      if ( $account_id -eq $production_account_id -And $region -eq "us-east-1" ){
                        Write-Output "set image prod us-east-1"
                        (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\Prod-East-Logo.jpeg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                        # set-itemproperty -path "HKCU:Control Panel\Desktop" -name WallPaper -value "$base_dir\Prod-East-Logo.jpeg"
                        # Copy-Item "$base_dir\Prod-East-Logo.jpeg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper_Info.jpg"
                        # Copy-Item "$base_dir\Prod-East-Logo.jpeg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper.jpg"
                      }    
                      elseif ( $account_id -eq $production_account_id -And $region -eq "us-west-2" ){
                        Write-Output "set image prod us-west-2"
                        (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\Prod-West-Logo.jpeg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                        # set-itemproperty -path "HKCU:Control Panel\Desktop" -name WallPaper -value "$base_dir\Prod-West-Logo.jpeg"
                        # Copy-Item "$base_dir\Prod-West-Logo.jpeg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper_Info.jpg"
                        # Copy-Item "$base_dir\Prod-West-Logo.jpeg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper.jpg"
                      }
                      elseif ( $account_id -eq $test_account_id -And $region -eq "us-east-1" ){
                        Write-Output "set image test us-east-1"
                        (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\test-logo.jpeg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                      }                      
                      elseif ( $account_id -eq $preprod_account_id -And $region -eq "us-east-1" ){
                        Write-Output "set image preprod us-east-1"
                        (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\PreProd-logo.jpg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                      }
                      elseif ( $account_id -eq $preprod_account_id -And $region -eq "us-west-2" ){
                        Write-Output "set image preprod us-west-2"
                        (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\PreProd-logo.jpg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                      }     
                      else{
                        Write-Output "set backgroup image none prod"
                        # set-itemproperty -path "HKCU:Control Panel\Desktop" -name WallPaper -value "$base_dir\verizon-black-logo.jpg"
                        # Copy-Item "$base_dir\verizon-black-logo.jpg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper_Info.jpg"
                        # Copy-Item "$base_dir\verizon-black-logo.jpg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper.jpg"
                        (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\verizon-black-logo.jpg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                      }
                      
                      #disable ec2launch set background
                      #Rename-Item -Path "C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1" -NewName "C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper-disable.ps1"
                      
                      # Installing windows exporter
                      msiexec /i $devops_tool_dir\windows_exporter-0.24.0-amd64.msi ENABLED_COLLECTORS="cpu,cs,logical_disk,net,os,system,container,memory" LISTEN_PORT=$prometheus_exporter_fw_port

                      # Run database script
                      #Write-Output "Run database script"
                      #Set-Location $base_dir
                      #& "$db_script"
                      
                      # Update Dns Record
                      $record2json = $recordinfo | ConvertFrom-Json
                      $record2json.Changes[0].ResourceRecordSet.ResourceRecords[0].Value = "$private_ip"
                      $record2json.Changes[0].ResourceRecordSet.Name = "$host_qdn"
                      $record2json | ConvertTo-Json -Depth 10 | Set-Content -Path "dns-record.json"
                      & "$aws_cli" route53 change-resource-record-sets --hosted-zone-id ${HOSTED_ZONE_ID} --change-batch file://$base_dir\dns-record.json
                      sleep 300
                      $recorddns2json = $recorddnsinfo | ConvertFrom-Json
                      $recorddns2json.Changes[0].ResourceRecordSet.Name = "$alias_qdn"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.HostedZoneId = "$hosted_zone_id"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.DNSName = "$host_qdn"
                      $recorddns2json | ConvertTo-Json -Depth 10 | Set-Content -Path "dns-alias-record.json"
                      & "$aws_cli" route53 change-resource-record-sets --hosted-zone-id ${HOSTED_ZONE_ID} --change-batch file://$base_dir\dns-alias-record.json
                      sleep 300
                      $recorddns2json = $recorddnsinfo | ConvertFrom-Json
                      $recorddns2json.Changes[0].ResourceRecordSet.Name = "acdr-pxy-ctrl.eye.com"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.HostedZoneId = "$hosted_zone_id"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.DNSName = "acdr-net-ctrl.eye.com"
                      $recorddns2json | ConvertTo-Json -Depth 10 | Set-Content -Path "dns-alias-record.json"
                      & "$aws_cli" route53 change-resource-record-sets --hosted-zone-id ${HOSTED_ZONE_ID} --change-batch file://$base_dir\dns-alias-record.json
                      sleep 300
                      $recorddns2json = $recorddnsinfo | ConvertFrom-Json
                      $recorddns2json.Changes[0].ResourceRecordSet.Name = "acdr-pxy-east.eye.com"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.HostedZoneId = "$hosted_zone_id"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.DNSName = "acdr-net-east.eye.com"
                      $recorddns2json | ConvertTo-Json -Depth 10 | Set-Content -Path "dns-alias-record.json"
                      & "$aws_cli" route53 change-resource-record-sets --hosted-zone-id ${HOSTED_ZONE_ID} --change-batch file://$base_dir\dns-alias-record.json
                      sleep 300
                      $recorddns2json = $recorddnsinfo | ConvertFrom-Json
                      $recorddns2json.Changes[0].ResourceRecordSet.Name = "acdr-pxy-west.eye.com"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.HostedZoneId = "$hosted_zone_id"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.DNSName = "acdr-net-west.eye.com"
                      $recorddns2json | ConvertTo-Json -Depth 10 | Set-Content -Path "dns-alias-record.json"
                      & "$aws_cli" route53 change-resource-record-sets --hosted-zone-id ${HOSTED_ZONE_ID} --change-batch file://$base_dir\dns-alias-record.json
                      sleep 300
                      $recorddns2json = $recorddnsinfo | ConvertFrom-Json
                      $recorddns2json.Changes[0].ResourceRecordSet.Name = "acdr-pxy-nrth.eye.com"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.HostedZoneId = "$hosted_zone_id"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.DNSName = "acdr-net-nrth.eye.com"
                      $recorddns2json | ConvertTo-Json -Depth 10 | Set-Content -Path "dns-alias-record.json"
                      & "$aws_cli" route53 change-resource-record-sets --hosted-zone-id ${HOSTED_ZONE_ID} --change-batch file://$base_dir\dns-alias-record.json
                      sleep 300
                      $recorddns2json = $recorddnsinfo | ConvertFrom-Json
                      $recorddns2json.Changes[0].ResourceRecordSet.Name = "acdr-pxy-soth.eye.com"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.HostedZoneId = "$hosted_zone_id"
                      $recorddns2json.Changes[0].ResourceRecordSet.AliasTarget.DNSName = "acdr-net-soth.eye.com"
                      $recorddns2json | ConvertTo-Json -Depth 10 | Set-Content -Path "dns-alias-record.json"
                      & "$aws_cli" route53 change-resource-record-sets --hosted-zone-id ${HOSTED_ZONE_ID} --change-batch file://$base_dir\dns-alias-record.json
                      
                      Write-Output "disable change wallpaper in ec2 launch"
                      $json = Get-Content "C:\ProgramData\Amazon\EC2-Windows\Launch\Config\LaunchConfig.json" | ConvertFrom-Json 
                      $json.setWallpaper = $false
                      $json | ConvertTo-Json | Out-File "C:\ProgramData\Amazon\EC2-Windows\Launch\Config\LaunchConfig.json"
                      
                      cat C:\ProgramData\Amazon\EC2-Windows\Launch\Config\LaunchConfig.json
                      
                      #(Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeInstance.ps1).replace('New-WallpaperSetup','echo New-WallpaperSetup') | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeInstance.ps1
                      #(Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\SysprepInstance.ps1).replace('Clear-Wallpaper','echo Clear-Wallpaper') | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\SysprepInstance.ps1
                      Get-DnsClientGlobalSetting
                      #Set DNS Setting for eye.com

                      Set-DnsClientGlobalSetting -SuffixSearchList @("$ec2_fqdn","ec2.internal","$domain_part")
                      #Set-DnsClientGlobalSetting -SuffixSearchList @("${REGION}.ec2-utilities.amazonaws.com","ec2.internal","eye.com")
                      netsh advfirewall firewall add rule name="ICMP Allow incoming V4" protocol=icmpv4:8,any dir=in action=allow
                      Get-DnsClientGlobalSetting
                      netsh advfirewall firewall add rule name="dept Spider" dir=in action=allow protocol=TCP localport=1433,9877,9878,9800-9821,9882-9892

                      

                      Write-Output "finish userdata."
                    - HOSTNAME: !FindInMap [mServers, !Ref ServerName, Name]
                      ENVIRONMENT_NAME: !Ref pEnvironment
                      REGION: !Ref AWS::Region
                      HOSTED_ZONE_ID: !Ref pHostedZoneId
            config2:
              commands:
                01-execute-user-data:
                  command: powershell.exe -ExecutionPolicy Unrestricted C:\Users\Administrator\Desktop\userdata.ps1
                  waitAfterCompletion: '0'
            config3:
              commands:
                01-restart:
                  command: powershell.exe -Command Restart-Computer
                  waitAfterCompletion: forever
                02-signal-resource:
                  command: !Sub >
                    cfn-signal.exe -e %ERRORLEVEL% --resource rdeptLaunchTemplate --stack ${AWS::StackName} --region ${AWS::Region}
        Properties:
          LaunchTemplateName: !Sub '${ServerName}LaunchTemplate'
          LaunchTemplateData: 
            BlockDeviceMappings:
              - DeviceName: /dev/sda1
                Ebs:
                  DeleteOnTermination: false
                  Encrypted: true
                  VolumeSize: !FindInMap [mServers, !Ref ServerName, DiskSize]
                  VolumeType: gp3
              - DeviceName: /dev/sdb
                NoDevice: ""
            KeyName: am-dept-infra-windows-server-keypair
            DisableApiStop: true
            DisableApiTermination: true
            ImageId: !Ref pDefaultAMI
            IamInstanceProfile:
              Name: !Ref rdeptInstanceProfile
            InstanceType: !FindInMap
              - mServers
              - !Ref ServerName
              - InstanceSize
            MetadataOptions:
              HttpPutResponseHopLimit: 2
              HttpTokens: required
            Monitoring:
              Enabled: true
            SecurityGroupIds:
              - '{{resolve:ssm:am-dept-infra-win-dept-srv-SecurityGroup}}'
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: !FindInMap [mServers, !Ref ServerName, Name]
                  - Key: Application
                    Value: !Ref 'AWS::StackId'
                  - Key: "dept:launched-by"
                    Value: !Ref pTagdeptLaunchedBy
                  - Key: "dept:resource-custodian"
                    Value: !Ref pTagdeptResourceCustodian
                  - Key: "dept:team-owner"
                    Value: !Ref pTagdeptTeamOwner
                  - Key: "dept:customer-data"
                    Value: !Ref pTagdeptCustomerData
                  - Key: "dept:dataclass"
                    Value: !Ref pTagdeptDataclass
                  - Key: "dept:ec2:os"
                    Value: windows
                  - Key: "dept:vast-id"
                    Value: !Ref pTagdeptVastId
                  - Key: "dept:vsad"
                    Value: !Ref pTagdeptVsad
                  - Key: "dept:purpose"
                    Value: !Ref pTagdeptPurpose     
                  - Key: "dept:lifecycle"
                    Value: !Ref pTagdeptLifecycle
                  - Key: "dept:role"
                    Value: !Ref pTagdeptRole
                  - Key: "dept:server-type"
                    Value: !FindInMap [mServers, !Ref ServerName, TagValue]
                  - Key: !FindInMap [amiExcemptTags, !Ref pEnvironment, 45days]
                    Value: exempt
                  - Key: !FindInMap [amiExcemptTags, !Ref pEnvironment, 90days]
                    Value: exempt
                  - Key: !FindInMap [amiExcemptTags, !Ref pEnvironment, 120days]
                    Value: exempt
                  - Key: !FindInMap [amiExcemptTags, !Ref pEnvironment, 135days]
                    Value: exempt
                  - Key: "PatchGroup"
                    Value: !FindInMap [mServers, !Ref ServerName, TagValue]
              - ResourceType: volume
                Tags:
                  - Key: Name
                    Value: !FindInMap [mServers, !Ref ServerName, Name]
              - ResourceType: network-interface
                Tags:
                  - Key: Name
                    Value: !FindInMap [mServers, !Ref ServerName, Name]
            UserData: 
              Fn::Base64: !Sub
                - |
                  <script>
                  cfn-init.exe -v -s ${AWS::StackId} -r ${TEMPLATE_NAME} --configsets ascending --region ${AWS::Region}
                  </script>
                - TEMPLATE_NAME: !Sub '${ServerName}LaunchTemplate'
        CreationPolicy:
          ResourceSignal:
            Count: '1'
            Timeout: PT30M

      '${ServerName}Asg':
        Type: AWS::AutoScaling::AutoScalingGroup
        Condition: cIsPreProdOrProd
        Properties:
          AutoScalingGroupName: !Sub '${ServerName}ASG'
          LaunchTemplate:
            LaunchTemplateId: !Ref
              Fn::Sub: ${ServerName}LaunchTemplate
            Version: !GetAtt
              - !Sub '${ServerName}LaunchTemplate'
              - LatestVersionNumber
          MinSize: !Ref aminSize
          MaxSize: !Ref amaxSize
          DesiredCapacity: !Ref pDesiredSize
          HealthCheckGracePeriod: 300
          NewInstancesProtectedFromScaleIn: false
          VPCZoneIdentifier:
            !If
              - cIsUsEast1
              - !If
                  - cIsPreProd
                  - !FindInMap [mServers, !Ref ServerName, PreProdRegion1Subnet]
                  - !FindInMap [mServers, !Ref ServerName, ProdRegion1Subnet]
              - !If
                - cIsPreProd
                - !FindInMap [mServers, !Ref ServerName, PreProdRegion2Subnet]
                - !FindInMap [mServers, !Ref ServerName, ProdRegion2Subnet]
          MetricsCollection:
            - Granularity: "1Minute"
              Metrics:
                - "GrouaminSize"
                - "GrouamaxSize"

  rdeptLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition: cIsDevOrTest
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - config1
            - config2
            - config3
        config1:
          files:
            C:\Users\Administrator\Desktop\userdata.ps1:
              content: !Sub
                - |
                  param ($server_name='${HOSTNAME}', $port='2103')
                  $background_image = ""
                  $fw_rule_name = "firewall rule enable"
                  $db_script = "./dbscript.bat"
                  $prometheus_exporter_fw_port = "9182"
                  $vrt_spider_port = "2110"
                  $fw_rule_name_vrt = "vrt to spider enable"
                  $s3_bucket_tool = "s3://dept-dept-tools-${pTagdeptLifecycle}"
                  $s3_bucket_bgimage = "s3://dept-background-images-${pTagdeptLifecycle}"
                  $aws_cli = "C:\Program Files\Amazon\AWSCLIV2\aws.exe"
                  $base_dir = "C:\Scripts"
                  $devops_tool_dir = "C:\DevOps\Tools\"
                  $production_account_id = "1111"
                  $preprod_account_id = "1111"
                  $test_account_id = "1111"
                  $domain = ".eye.com"
                  $domain_part = "eye.com"
                  $hostname = "${HOSTNAME}"
                  $host_qdn = $hostname + $domain

                  [string]$token = Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token-ttl-seconds" = "21600"} -Method PUT -Uri http://169.254.169.254/latest/api/token
                  $region = (Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token" = $token} -Method GET http://169.254.169.254/latest/dynamic/instance-identity/document).region
                  $account_id = (Invoke-WebRequest -Headers @{"X-aws-ec2-metadata-token" = $token} -Method GET -UseBasicParsing -Uri http://169.254.169.254/latest/dynamic/instance-identity/document | ConvertFrom-Json).accountId
                  $private_ip = (Invoke-WebRequest -Headers @{"X-aws-ec2-metadata-token" = $token} -Method GET -UseBasicParsing -Uri http://169.254.169.254/latest/meta-data/local-ipv4)
                  #$ec2_fqdn = $region + ".ec2-utilities.amazonaws.com"

                  $recordinfo = @"
                  {
                    "Comment": "Create an A record",
                    "Changes": [
                      {
                        "Action": "UPSERT",
                        "ResourceRecordSet": {
                          "Name": "test1.eye.com",
                          "Type": "A",
                          "TTL": 300,
                          "ResourceRecords": [
                            {
                              "Value": "change"
                            }
                          ]
                        }
                      }
                    ]
                  }
                  "@

                  #download background image
                  
                  & "$aws_cli" s3 sync $s3_bucket_bgimage .

                  if (Test-Path $devops_tool_dir) {  
                    Write-Host "$devops_tool_dir Exists"
                    # Perform Delete file from folder operation
                  }
                  else
                  {
                    #PowerShell Create directory if not exists
                    New-Item $devops_tool_dir -ItemType Directory
                    Write-Host "Folder Created successfully"
                    Set-Location C:/DevOps/Tools/
                    
                    #s3 download tool
                    Write-Output "download tool form s3"
                    & "$aws_cli" s3 sync $s3_bucket_tool .
                  }

                  # Open port on fw
                  if((netsh advfirewall firewall show rule name="$fw_rule_name") -Contains "No rules match the specified criteria.")
                  {
                    Write-Output "open $port on firewall"  
                    netsh advfirewall firewall add rule name="$fw_rule_name" dir=in action=allow protocol=TCP localport=$port enable=yes
                  }
                  else
                  {
                    Write-Output "the rule already exists"
                  }

                  # Open port on for VRT to Spider
                  if((netsh advfirewall firewall show rule name="$fw_rule_name_vrt") -Contains "No rules match the specified criteria.")
                  {
                    Write-Output "open $port on firewall"  
                    netsh advfirewall firewall add rule name="$fw_rule_name_vrt" dir=in action=allow protocol=TCP localport=$vrt_spider_port enable=yes
                  }
                  else
                  {
                    Write-Output "VRT to Spider rule already exists"
                  }

                  # Rename server
                  Write-Output "Rename server to $server_name"
                  Rename-Computer -NewName "$server_name"

                  # Change background
                  # Write-Output "Change background"
                  # set-itemproperty -path "HKCU:Control Panel\Desktop" -name WallPaper -value $background_image
                  New-Item $base_dir -ItemType Directory
                  Write-Host "scripts Folder Created successfully"
                  
                  Set-Location $base_dir
                  
                  #download background image
                  & "$aws_cli" s3 sync $s3_bucket_bgimage .
                  if ( $account_id -eq $production_account_id -And $region -eq "us-east-1" ){
                    Write-Output "set image prod us-east-1"
                    (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\Prod-East-Logo.jpeg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                    # set-itemproperty -path "HKCU:Control Panel\Desktop" -name WallPaper -value "$base_dir\Prod-East-Logo.jpeg"
                    # Copy-Item "$base_dir\Prod-East-Logo.jpeg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper_Info.jpg"
                    # Copy-Item "$base_dir\Prod-East-Logo.jpeg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper.jpg"
                  }    
                  elseif ( $account_id -eq $production_account_id -And $region -eq "us-west-2" ){
                    Write-Output "set image prod us-west-2"
                    (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\Prod-West-Logo.jpeg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                    # set-itemproperty -path "HKCU:Control Panel\Desktop" -name WallPaper -value "$base_dir\Prod-West-Logo.jpeg"
                    # Copy-Item "$base_dir\Prod-West-Logo.jpeg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper_Info.jpg"
                    # Copy-Item "$base_dir\Prod-West-Logo.jpeg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper.jpg"
                  }
                  elseif ( $account_id -eq $test_account_id -And $region -eq "us-east-1" ){
                    Write-Output "set image test us-east-1"
                    (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\test-logo.jpeg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                  }                      
                  elseif ( $account_id -eq $preprod_account_id -And $region -eq "us-east-1" ){
                    Write-Output "set image preprod us-east-1"
                    (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\PreProd-logo.jpg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                  }
                  elseif ( $account_id -eq $preprod_account_id -And $region -eq "us-west-2" ){
                    Write-Output "set image preprod us-west-2"
                    (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\PreProd-logo.jpg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                  }     
                  else{
                    Write-Output "set backgroup image none prod"
                    # set-itemproperty -path "HKCU:Control Panel\Desktop" -name WallPaper -value "$base_dir\verizon-black-logo.jpg"
                    # Copy-Item "$base_dir\verizon-black-logo.jpg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper_Info.jpg"
                    # Copy-Item "$base_dir\verizon-black-logo.jpg" -Destination "C:\Users\Administrator\AppData\Local\Ec2Wallpaper.jpg"
                    (Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1).replace('SetWallpaper($customWallpaperPath)', "SetWallpaper('$base_dir\verizon-black-logo.jpg')") | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1
                  }
                  
                  #disable ec2launch set background
                  #Rename-Item -Path "C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper.ps1" -NewName "C:\ProgramData\Amazon\EC2-Windows\Launch\Module\Scripts\Set-Wallpaper-disable.ps1"
                  
                  # Installing windows exporter
                  msiexec /i $devops_tool_dir\windows_exporter-0.24.0-amd64.msi ENABLED_COLLECTORS="cpu,cs,logical_disk,net,os,system,container,memory" LISTEN_PORT=$prometheus_exporter_fw_port

                  # Run database script
                  #Write-Output "Run database script"
                  #Set-Location $base_dir
                  #& "$db_script"
                  
                  # Update Dns Record
                  $record2json = $recordinfo | ConvertFrom-Json
                  $record2json.Changes[0].ResourceRecordSet.ResourceRecords[0].Value = "$private_ip"
                  $record2json.Changes[0].ResourceRecordSet.Name = "$host_qdn"
                  $record2json | ConvertTo-Json -Depth 10 | Set-Content -Path "dns-record.json"
                  & "$aws_cli" route53 change-resource-record-sets --hosted-zone-id ${HOSTED_ZONE_ID} --change-batch file://$base_dir\dns-record.json
                  
                  Write-Output "disable change wallpaper in ec2 launch"
                  $json = Get-Content "C:\ProgramData\Amazon\EC2-Windows\Launch\Config\LaunchConfig.json" | ConvertFrom-Json 
                  $json.setWallpaper = $false
                  $json | ConvertTo-Json | Out-File "C:\ProgramData\Amazon\EC2-Windows\Launch\Config\LaunchConfig.json"
                  
                  cat C:\ProgramData\Amazon\EC2-Windows\Launch\Config\LaunchConfig.json
                  
                  #(Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeInstance.ps1).replace('New-WallpaperSetup','echo New-WallpaperSetup') | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeInstance.ps1
                  #(Get-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\SysprepInstance.ps1).replace('Clear-Wallpaper','echo Clear-Wallpaper') | Set-Content C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\SysprepInstance.ps1
                  Get-DnsClientGlobalSetting
                  #Set DNS Setting for eye.com

                  #Set-DnsClientGlobalSetting -SuffixSearchList @("$ec2_fqdn","ec2.internal","$domain_part")
                  Set-DnsClientGlobalSetting -SuffixSearchList @("${REGION}.ec2-utilities.amazonaws.com","ec2.internal","eye.com")
                  netsh advfirewall firewall add rule name="ICMP Allow incoming V4" protocol=icmpv4:8,any dir=in action=allow
                  Get-DnsClientGlobalSetting

                  

                  Write-Output "finish userdata."
                - HOSTNAME: !If
                  - cIsDev
                  - acdr-net-dev
                  - acdr-net-qa
                  HOSTED_ZONE_ID: !Ref pHostedZoneId
                  ENVIRONMENT_NAME: !Ref pEnvironment
                  REGION: !Ref AWS::Region
        config2:
          commands:
            01-execute-user-data:
              command: powershell.exe -ExecutionPolicy Unrestricted C:\Users\Administrator\Desktop\userdata.ps1
              waitAfterCompletion: '0'
        config3:
          commands:
            01-restart:
              command: powershell.exe -Command Restart-Computer
              waitAfterCompletion: forever
            02-signal-resource:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --resource rdeptLaunchTemplate --stack ${AWS::StackName} --region ${AWS::Region}
    Properties:
      LaunchTemplateName: !Sub ${pProjectName}
      LaunchTemplateData: 
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              DeleteOnTermination: false
              Encrypted: true
              VolumeSize: 100
              VolumeType: gp3
          - DeviceName: /dev/sdb
            NoDevice: ""
        DisableApiStop: true
        DisableApiTermination: true
        KeyName: am-dept-infra-windows-server-keypair
        ImageId: !Ref pDefaultAMI
        IamInstanceProfile:
          Name: !Ref rdeptInstanceProfile
        InstanceType: !Ref pDefaultInstanceType
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: required
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - '{{resolve:ssm:am-dept-infra-win-dept-srv-SecurityGroup}}'
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: 
                  !If
                    - cIsDev
                    - acdr-net-dev
                    - acdr-net-qa
              - Key: Application
                Value: !Ref 'AWS::StackId'
              - Key: "dept:launched-by"
                Value: !Ref pTagdeptLaunchedBy
              - Key: "dept:resource-custodian"
                Value: !Ref pTagdeptResourceCustodian
              - Key: "dept:team-owner"
                Value: !Ref pTagdeptTeamOwner
              - Key: "dept:customer-data"
                Value: !Ref pTagdeptCustomerData
              - Key: "dept:dataclass"
                Value: !Ref pTagdeptDataclass
              - Key: "dept:ec2:os"
                Value: windows
              - Key: "dept:vast-id"
                Value: !Ref pTagdeptVastId
              - Key: "dept:vsad"
                Value: !Ref pTagdeptVsad
              - Key: "dept:purpose"
                Value: !Ref pTagdeptPurpose     
              - Key: "dept:lifecycle"
                Value: !Ref pTagdeptLifecycle
              - Key: "dept:role"
                Value: !Ref pTagdeptRole
              - Key: "dept:server-type"
                Value: !Ref pTagdeptServerType
              - Key: !FindInMap [amiExcemptTags, !Ref pEnvironment, 45days]
                Value: exempt
              - Key: "PatchGroup"
                Value: !Ref pTagdeptServerType
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub ${pProjectName}
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: !Sub ${pProjectName}
        UserData: 
          Fn::Base64: !Sub 
            <script>
            cfn-init.exe -v -s ${AWS::StackId} -r rdeptLaunchTemplate --configsets ascending --region ${AWS::Region}
            </script>
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT30M

  rdeptInstanceASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: cIsDevOrTest
    Properties:
      AutoScalingGroupName: !Sub ${pProjectName}-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref rdeptLaunchTemplate
        Version: !GetAtt rdeptLaunchTemplate.LatestVersionNumber
      MinSize: !Ref aminSize
      MaxSize: !Ref amaxSize
      DesiredCapacity: !Ref pDesiredSize
      HealthCheckGracePeriod: 300
      NewInstancesProtectedFromScaleIn: false
      VPCZoneIdentifier: !Ref pDefaultSubnetIds
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GrouaminSize"
            - "GrouamaxSize"
    
  rdeptInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Sub ${rdeptInstanceRole}
    DependsOn: rdeptInstanceRole

  rdeptInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: !Sub ${pProjectName}-instance-role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/dept-fed-svcrole-boundary
      ManagedPolicyArns:
        - !Join [ "", ["arn:", Ref: AWS::Partition, ":iam::aws:policy/AmazonSSMManagedInstanceCore"] ]
        - !Join [ "", ["arn:", Ref: AWS::Partition, ":iam::aws:policy/AmazonS3ReadOnlyAccess"] ]
        - !Join [ "", ["arn:", Ref: AWS::Partition, ":iam::aws:policy/AmazonEC2ReadOnlyAccess"] ]
        - !Join [ "", ["arn:", Ref: AWS::Partition, ":iam::aws:policy/CloudWatchAgentServerPolicy"] ]
      Policies:
        -
          PolicyName: "AllowSecretsMgrAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: allowsecretaccess
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 
                  # - !ImportValue iSSPubArn
                  # - !ImportValue iSSPrivArn
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
        - 
          PolicyName: "AllowKMSAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:   
              - Sid: allowkmskeyaccess
                Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
        -
          PolicyName: "AllowS3Access"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:   
              - Sid: allows3access
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectAttributes
                  - s3:GetObjectVersion
                  - s3:GetObjectAttributes
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: 
                  - arn:aws:s3:::dept-deployment-files
                  - arn:aws:s3:::dept-deployment-files/*
                  - arn:aws:s3:::am-dept-application-us-east-1
                  - arn:aws:s3:::am-dept-application-us-east-1/*
                  - !Sub arn:aws:s3:::dept-dept-tools-${pTagdeptLifecycle}
                  - !Sub arn:aws:s3:::dept-dept-tools-${pTagdeptLifecycle}/*
                  - !Sub arn:aws:s3:::dept-background-images-${pTagdeptLifecycle}
                  - !Sub arn:aws:s3:::dept-background-images-${pTagdeptLifecycle}/*
        -
          PolicyName: "AllowRoute53Access"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: allowroute53access
                Effect: Allow
                Action:
                  - route53:*
                Resource: !Sub arn:aws:route53:::hostedzone/${pHostedZoneId}